var clientCookie 		= require('client-cookie-utils');
var net 				= require('net');
var S 					= require('string');
var childProcess        = require('child_process');
var regexp 				= require('node-regexp')
var re 					= regexp().start('frame=').anything().find('fps=').toRegExp();
var ff;

var FeedManager = module.exports = {
	instances : [],
	publishFeed : function(feedName, callback){
		var result = {};
		if (!FeedManager.isFeedBeingPublished(feedName)){
			var cookie = clientCookie.getClientCookie();
			var allFeeds = cookie.camFeeds;
			console.log("Looking to publish "+feedName+" in feed list:");
			console.log(allFeeds);

			var daFeed = allFeeds.filter(function(o){
				return (o.name == feedName);
			})[0];

			console.log("/// Feed found ///");
			console.log(daFeed);
			console.log("//////////////////");

			console.log("Checking if host is up @"+daFeed.hostname+":554");

			var opts = {
			  range: [daFeed.hostname],
			    ports: '554'
			}

			var socket = net.createConnection(554, daFeed.hostname, function() {
	            //good
	            socket.end();
					console.log("host is up, next ...");

					ff = childProcess.spawn("ffmpeg", ["-re","-rtsp_transport","tcp","-i",daFeed.rtspUri,"-c:v","copy","-c:a","copy","-f","flv",daFeed.rtmpUri]);

					ff.stderr.on('data', function (data) {

					console.log('Stderr :'+data);

		            if (re.test(data)){
		              	result.success = true;
		              	result.message = "FeedManager :: "+feedName+" started properly";
		             	FeedManager.setFeedStatus(feedName,true,"Feed is live",ff)
						callback(result);
						ff.stderr.pause();
		            }

		            }); 
		            ff.on('close', function (code) {
		            	if (code == 1){
			            	result.success = false;
			            	result.message = "FeedManager :: "+feedName+" couldn't be started";   
			            	FeedManager.setFeedStatus(feedName,false,"Couldn't be started",null)
			            	callback(result);
		            	}
		            });	            
	        });

	        socket.on('error', function(err) {
	            console.log("host is down");
	            console.log(err);
				result.success = false;
          		result.message = "FeedManager :: "+feedName+" , host is down";
          		FeedManager.setFeedStatus(feedName,false,"Host is down",null)
          		callback(result);
	        });

			/*nmap.nmap('scan', opts, function(err, report){
			  if (err) console.log(err);

			  	console.log('nmap report');
			  	console.log(report);

			  	report.forEach(function(item){
				    console.log(item[0]);
				  });

			  	var result = report.filter(function(o){
			  		return (o[0].ip == daFeed.hostname && o[0].ports[0].state == 'open');
			  	});
			  
				console.log("extracted result :");
				console.log(result);
				if (result.length != 0){
					console.log("host is up, next ...");

					ff = childProcess.spawn("ffmpeg", ["-re","-rtsp_transport","tcp","-i",daFeed.rtspUri,"-c:v","copy","-c:a","copy","-f","flv",daFeed.rtmpUri]);

					ff.stderr.on('data', function (data) {

					console.log('Stderr :'+data);

		              if (re.test(data)){
		              	result.success = true;
		              	result.message = "FeedManager :: "+feedName+" started properly";
		             	FeedManager.setFeedStatus(feedName,true,"Feed is live",ff)
						callback(result);
						ff.stderr.pause();
		              }

		            }); 
		            ff.on('close', function (code) {
		              if (code == 1)
		            	result.success = false;
		            	result.message = "FeedManager :: "+feedName+" couldn't be started";   
		            	FeedManager.setFeedStatus(feedName,false,"Couldn't be started",null)
		            	callback(result);
		            });

				} else {
					console.log("host is down");
					result.success = false;
              		result.message = "FeedManager :: "+feedName+" , host is down";
              		FeedManager.setFeedStatus(feedName,false,"Host is down",null)
              		callback(result);
				}
			});*/
			

		} else {
			result.success = true;
			result.message = "FeedManager :: "+feedName+" is already running";
			FeedManager.notifyFeedUpdates();
			callback(result);
		}		
	},
	stopFeed : function(feedName){
		var n = S(feedName).slugify();
		var result = false;
		FeedManager.instances.filter(function(ff){
			if (ff.name == n){
				ff.kill('SIGHUP');
				result = true;
				return true;
			} else {
				return false;
			}
		});
		return result;

	},
	setFeedStatus : function (feedName,isLive,message,ff){
		var feed = FeedManager.retrieveFeedStatusObject(feedName);
		if (feed){
			feed.isLive = isLive;
			feed.message = message;
			feed.ff = ff;
		} else {
			FeedManager.instances.push({name:S(feedName).slugify().s,isLive:isLive,message:message,ff:ff});
		}
		FeedManager.notifyFeedUpdates();
	},
	retrieveFeedStatusObject : function(feedName){
		var n = S(feedName).slugify().s;
		var results = FeedManager.instances.filter(function(o){
			return (n == o.name );
		});
		if (results.length > 0)
			return results[0];
		else
			return null
	},
	notifyFeedUpdates : function(){
		var status = [];
		FeedManager.instances.forEach(function(o){
			status.push({name:o.name,isLive:o.isLive,messsage:o.message});
		})
		require('witouch-mainserver').sendFeedStatusUpdate({status:status});
	},
	isFeedBeingPublished : function(feedName){	
		var feed = FeedManager.retrieveFeedStatusObject(feedName);
		if (feed)
			if (feed.isLive)
				return true;
			else
				return false;
		else
			return false;
	},
	stopAllFeeds : function(feedName){

	},
	killAllExisting : function(){
		console.log("Killing all existing ffmpeg instances ...");
		childProcess.spawn('killall',['ffmpeg']);
	}
}